[gd_scene load_steps=16 format=3 uid="uid://jqm2wtfryp6"]

[ext_resource type="Script" uid="uid://bhkxfaoxi3asa" path="res://states/connected/connected.gd" id="1_idi6s"]
[ext_resource type="Script" uid="uid://c206uqobsy0s1" path="res://classes/log/log.gd" id="2_kh2bm"]
[ext_resource type="Texture2D" uid="uid://bevefj5ql223m" path="res://textures/login_screen.jpeg" id="2_x7iwh"]

[sub_resource type="Shader" id="Shader_kh2bm"]
code = "shader_type canvas_item;

#define iTime TIME
#define iResolution 1.0/SCREEN_PIXEL_SIZE
#define fragColor COLOR
#define fragCoord FRAGCOORD

uniform float kelvin : hint_range(0.0, 10000.0) = 1000.0;
uniform float red_colour: hint_range(0.0, 24.0, 0.1) = 7.4;
uniform float green_colour: hint_range(0.0, 24.0, 0.1) = 5.6;
uniform float blue_colour: hint_range(0.0, 24.0, 0.1) = 4.4;
uniform float time_factor: hint_range(0.0, 3.0, 0.01) = 1.5;
uniform bool move = false;
uniform float resolution: hint_range(0.01, 3.0, 0.01) = 0.4;
uniform float sin_roll: hint_range(0.0, 1.0, 0.01) = 0.25;
uniform float cos_roll: hint_range(0.0, 1.0, 0.01) = 0.25;
uniform float alpha: hint_range(0.0, 1.0, 0.01) = 1.0;

uniform sampler2D mask_texture: source_color;
/* 

    Combustible Voronoi Layers
	--------------------------

    The effect itself is nothing new or exciting, just some moving 3D Voronoi layering. 
    However, the fire palette might prove useful to some.

*/


// This is my favorite fire palette. It's trimmed down for shader usage, and is based on an 
// article I read at Hugo Elias's site years ago. I'm sure most old people, like me, have 
// visited his site at one time or another:
//
// http://freespace.virgin.net/hugo.elias/models/m_ffire.htm
//
vec3 firePalette(float i){

    float T = 1400. + kelvin*i; // Temperature range (in Kelvin).
	//vec4(0.1,0.1,0.1,1.0
    vec3 L =  vec3(red_colour, blue_colour, green_colour); // Red, green, blue wavelengths (in hundreds of nanometers).
    L = pow(L,vec3(5)) * (exp(1.43876719683e5/(T*L)) - 1.);
    return 1. - exp(-5e8/L); // Exposure level. Set to \"50.\" For \"70,\" change the \"5\" to a \"7,\" etc.
}

/*
vec3 firePalette(float i){

    float T = 1400. + 1300.*i; // Temperature range (in Kelvin).
    // Hardcode red, green and blue wavelengths (in hundreds of nanometers).
    vec3 L = (exp(vec3(19442.7999572, 25692.271372, 32699.2544734)/T) - 1.);
    // Exposure level. Set to \"50\" For \"70,\" change the \".5\" to a \".7,\" etc.
    return 1. - exp(-vec3(22532.6051122, 90788.296915, 303184.239775)*2.*.5/L); 
}
*/

// Hash function. This particular one probably doesn't disperse things quite as nicely as some 
// of the others around, but it's compact, and seems to work.
//
vec3 hash33(vec3 p){ 
    
    float n = sin(dot(p, vec3(7, 157, 113)));   //float n = sin(dot(p, vec3(7, 157, 113)));  
    return fract(vec3(2097152, 262144, 32768)*n); 
}

// 3D Voronoi: Obviously, this is just a rehash of IQ's original.
//
float voronoi(vec3 p){

	vec3 b, r, g = floor(p);
	p = fract(p); // \"p -= g;\" works on some GPUs, but not all, for some annoying reason.
	
	// Maximum value: I think outliers could get as high as \"3,\" the squared diagonal length 
	// of the unit cube, with the mid point being \"0.75.\" Is that right? Either way, for this 
	// example, the maximum is set to one, which would cover a good part of the range, whilst 
	// dispensing with the need to clamp the final result.
	float d = 1.; 
     
    // I've unrolled one of the loops. GPU architecture is a mystery to me, but I'm aware 
    // they're not fond of nesting, branching, etc. My laptop GPU seems to hate everything, 
    // including multiple loops. If it were a person, we wouldn't hang out. 
	for(int j = -1; j <= 1; j++) {
	    for(int i = -1; i <= 1; i++) {
    		
		    b = vec3(float(i), float(j), -1);
		    r = b - p + hash33(g+b);
		    d = min(d, dot(r,r));
    		
		    b.z = 0.0;
		    r = b - p + hash33(g+b);
		    d = min(d, dot(r,r));
    		
		    b.z = 1.;
		    r = b - p + hash33(g+b);
		    d = min(d, dot(r,r));
    			
	    }
	}
	
	return d; // Range: [0, 1]
}

// Standard fBm function with some time dialation to give a parallax 
// kind of effect. In other words, the position and time frequencies 
// are changed at different rates from layer to layer.
//
float noiseLayers(in vec3 p) {

    // Normally, you'd just add a time vector to \"p,\" and be done with 
    // it. However, in this instance, time is added seperately so that 
    // its frequency can be changed at a different rate. \"p.z\" is thrown 
    // in there just to distort things a little more.
    vec3 t = vec3(0., 0., p.z + iTime*time_factor);

    const int iter = 5; // Just five layers is enough.
    float tot = 0., sum = 0., amp = 1.; // Total, sum, amplitude.

    for (int i = 0; i < iter; i++) {
        tot += voronoi(p + t) * amp; // Add the layer to the total.
        p *= 2.; // Position multiplied by two.
        t *= 1.5; // Time multiplied by less than two.
        sum += amp; // Sum of amplitudes.
        amp *= .5; // Decrease successive layer amplitude, as normal.
    }
    
    return tot/sum; // Range: [0, 1].
}

float rand(vec2 st) {
	
    return fract(sin(dot(st.xy, vec2(12.9898,72.233))) * 53758.5453123);
}


void fragment()
{
    // Screen coordinates.
	vec2 uv = (UV - 0.5) * vec2( SCREEN_PIXEL_SIZE.y / SCREEN_PIXEL_SIZE.x, 1.0);
	
	// Shifting the central position around, just a little, to simulate a 
	// moving camera, albeit a pretty lame one.
	if (move) {
		uv += vec2(sin(iTime*.5)*.25, cos(iTime*.5)*.125);
	}
	
	
    // Constructing the unit ray. 
	vec3 rd = normalize(vec3(uv.x, uv.y, resolution + 0.1415926535898/8.));

    // Rotating the ray about the XY plane, to simulate a rolling camera.
	
	float cs = cos(iTime*cos_roll), si = sin(iTime*sin_roll);
    // Apparently \"r *= rM\" can break in some older browsers.
	rd.xy = rd.xy*mat2(vec2(cs, -si), vec2(si, cs)); 
	
	// Passing a unit ray multiple into the Voronoi layer function, which 
	// is nothing more than an fBm setup with some time dialation.
	float c = noiseLayers(rd*2.);
	
	// Optional: Adding a bit of random noise for a subtle dust effect. 
	c = max(c + dot(hash33(rd)*2. - 1., vec3(.015)), 0.);

    // Coloring:
    
    // Nebula.
    c *= sqrt(c)*1.5; // Contrast.
    vec3 col = firePalette(c); // Palettization.
    //col = mix(col, col.zyx*.1+ c*.9, clamp((1.+rd.x+rd.y)*0.45, 0., 1.)); // Color dispersion.
    col = mix(col, col.zyx*.15 + c*.85, min(pow(dot(rd.xy, rd.xy)*1.2, 1.5), 1.)); // Color dispersion.
    col = pow(col, vec3(1.25)); // Tweaking the contrast a little.
    
    // The fire palette on its own. Perhaps a little too much fire color.
    //c = pow(c*1.33, 1.25);
    //vec3 col =  firePalette(c);
   
    // Black and white, just to keep the art students happy. :)
	//c *= c*1.5;
	//vec3 col = vec3(c);
	
	float stars = 0.0;
	
	if (rand(SCREEN_UV.xy / 20.0) > 0.995) //0.996
	{
		float r = rand(SCREEN_UV.xy);
		stars = r * (0.5 * sin(TIME * (r * 2.0) + 1000.0 * r) + 0.5);
	}
	
	
	
	// Rough gamma correction, and done.
	float mask = texture(mask_texture, UV).r;
	fragColor = (vec4(sqrt(clamp(col + stars, 0., 1.)), 1))  * alpha * mask;
	
	//fragColor.a =(fragColor.r + fragColor.g + fragColor.b) / 3.;
}"

[sub_resource type="Gradient" id="Gradient_x7iwh"]
offsets = PackedFloat32Array(0.5, 1)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_tk3qr"]
gradient = SubResource("Gradient_x7iwh")
fill = 1
fill_from = Vector2(0.505376, 0.543011)
fill_to = Vector2(0.903226, 0.139785)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rp112"]
shader = SubResource("Shader_kh2bm")
shader_parameter/kelvin = 2348.32
shader_parameter/red_colour = 18.2
shader_parameter/green_colour = 6.8
shader_parameter/blue_colour = 10.6
shader_parameter/time_factor = 1.5
shader_parameter/move = false
shader_parameter/resolution = 0.33
shader_parameter/sin_roll = 0.25
shader_parameter/cos_roll = 0.62
shader_parameter/alpha = 0.7
shader_parameter/mask_texture = SubResource("GradientTexture2D_tk3qr")

[sub_resource type="Shader" id="Shader_o1o5k"]
code = "shader_type canvas_item;

uniform sampler2D mask_texture: source_color;

float hash12(vec2 p) {
	vec3 p3 = fract(p.xyx * 0.1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

float noise(vec2 p) {
	vec2 i = floor(p);
	vec2 f = fract(p);
	f = f * f * (3.0 - 2.0 * f);
	float res = mix(
		mix(hash12(i), hash12(i + vec2(1, 0)), f.x),
		mix(hash12(i + vec2(0, 1)), hash12(i + vec2(1)), f.x), f.y);
	return res * res;	
}

void fragment() {
    //vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);
	vec2 uv = UV - vec2(0.5);

    float l = sqrt(length(uv));
    float a = l * 9.0 - TIME;
    
    uv = cos(-uv.x + a) * uv + sin(a) * vec2(-uv.y, uv.x);
    
    float n = sqrt(noise(uv * 2.0));
    float b = noise(35.185 - uv * 8.0);
    float c = 1.0 / (b + 1.0);
    float s = smoothstep(0.3, 0.6 * c, n * (1.25 - l*l));
    float d = sin(6.0 * n * b) * 0.5 + 0.5;
    
	//vec3 c1 = vec3(1.0, 0.0, 0.0);
	//vec3 c2 = vec3(0.0, 1.0, 0.0);
	//vec3 c3 = vec3(0.0, 0.0, 1.0);
    vec3 c1 = cos(vec3(s * n, n * n, d - s) * 10.0 - b) * 1.0 + 0.5;
    vec3 c2 = sin((vec3(s - b, -n, n)) * 6.0);
    vec3 c3 = sin(vec3(b, b, d) * 2.0 / (0.2 + l));
//
    vec3 col = c1 * s;
    col += (1.0 - s) * c2 * smoothstep(0.2, 0.4, b * (1.1 - l * l));
    
    // can't decide which one of these is better
    //col += mix((1.0 - l) * c3 * l, (0.8 - l) * c3 * l, l);
    col += (1.0 - sqrt(l)) * c3;
    //col += (0.8 - l) * c3 * l;
    
    col = clamp(col, vec3(0), vec3(1));
	float mask = 1.0 - texture(mask_texture, UV).r;
    COLOR = vec4(col, 1.0) * mask;
}"

[sub_resource type="Gradient" id="Gradient_ne18u"]
offsets = PackedFloat32Array(0.459016, 0.827869)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_wedun"]
gradient = SubResource("Gradient_ne18u")
fill = 1
fill_from = Vector2(0.5, 0.5)
metadata/_snap_enabled = true

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rr3ed"]
shader = SubResource("Shader_o1o5k")
shader_parameter/mask_texture = SubResource("GradientTexture2D_wedun")

[sub_resource type="Shader" id="Shader_x7iwh"]
code = "shader_type canvas_item;
render_mode blend_add;

#define SMOOTH 1
#define DEBUG_LINE 0

#if SMOOTH
#define FLAME_BASE_WIDTH 0.08;
#else
#define FLAME_BASE_WIDTH .0
#endif
uniform sampler2D texture_mask: source_color;

float rand(float n){return fract(sin(n) * 43758.5453123);}

float noise(float r, float x, const float n)
{
    r *= 1337.;
    float noise0 = rand(r + floor(n * x));
    float noise1 = rand(r + floor(n * x + 1.));
    float t = fract(n * x);
	return t * noise1 + (1. - t) * noise0;
}

float line(vec2 uv)
{
    
	float center = .1 * (noise(1., uv.y, 5.) + .8 * noise(2., uv.y, 10.) - .9);
	float width = FLAME_BASE_WIDTH + .04 * (noise(3., uv.y, 5.) + .8 * noise(4., uv.y, 10.));    
#if SMOOTH
    //return sin(3.14 * clamp(.5 + (uv.x - center) / width, 0., 1.));
    if (uv.x < center - width)
        return 0.;
    if (uv.x < center)
        return smoothstep(center - width, center - .7 * width, uv.x);
    if (uv.x < center + width)
        return 1. - smoothstep(center + .7 * width, center + width, uv.x);
	return 0.;
#endif
}

vec2 rot(vec2 uv, float a)
{
    return uv * mat2(vec2(cos(a), -sin(a)), vec2(sin(a), cos(a)));
}

float flame(vec2 uv, float spread, float p)
{
	float col = 1.;
    col *= line(rot(uv, 3.14 - spread) + vec2(0., p + TIME));
    col *= line(rot(uv, 3.14 + spread) + vec2(0., p + TIME));
	return col;
}

vec3 fire_color(float x)
{
	return
        // red
        vec3(1., 0., 0.) * x
        // yellow
        + vec3(1., 1., 0.) * clamp(x - .5, 0., 1.)
        // white
        + vec3(1., 1., 1.) * clamp(x - .7, 0., 1.);
}

vec3 smoke_color(float x)
{
    return vec3(.5, .5, .5) * x;
}

void fragment()
{
	vec2 uv = vec2((UV.x - 0.5)*0.4, UV.y - 0.5);

    
#if DEBUG_LINE
   	fragColor = vec4(vec3(1., 0., 0.) * line(uv + vec2(0., TIME)), 1.0);
#else
    const int fire_n = 10;
	float fire_intensity = 0.;
    for (int i = 0; i < fire_n; ++i) {
        float t = float(i)/ float(fire_n) - .5;
    	fire_intensity += flame(uv + vec2(0., .08 + .1 * t), .15 + .1 * t, 273. * float(i));
    }

    COLOR = vec4(fire_color(6. * fire_intensity / float(fire_n)), 1.0);
	float mask = texture(texture_mask, UV).r;
	COLOR.rgb *= mask;
#endif
}"

[sub_resource type="Gradient" id="Gradient_tk3qr"]
offsets = PackedFloat32Array(0, 0.803279)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_rp112"]
gradient = SubResource("Gradient_tk3qr")
fill = 1
fill_from = Vector2(0.516129, 0.526882)
fill_to = Vector2(0.930108, 0.0591398)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o1o5k"]
shader = SubResource("Shader_x7iwh")
shader_parameter/texture_mask = SubResource("GradientTexture2D_rp112")

[node name="Connected" type="Node"]
script = ExtResource("1_idi6s")

[node name="LoginScreen" type="TextureRect" parent="."]
offset_right = 1152.0
offset_bottom = 647.0
texture = ExtResource("2_x7iwh")
expand_mode = 2

[node name="ColorRect2" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_rp112")
offset_left = 366.0
offset_top = 192.0
offset_right = 779.0
offset_bottom = 599.0

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
material = SubResource("ShaderMaterial_rr3ed")
offset_left = 456.0
offset_top = 273.0
offset_right = 716.0
offset_bottom = 541.0

[node name="Torch" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_o1o5k")
offset_left = -20.0
offset_top = 424.0
offset_right = 236.0
offset_bottom = 592.0

[node name="Torch2" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_o1o5k")
offset_left = 746.0
offset_top = 408.0
offset_right = 1002.0
offset_bottom = 576.0

[node name="UI" type="CanvasLayer" parent="."]

[node name="VBoxContainer" type="VBoxContainer" parent="UI"]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -95.0
offset_top = -7.0
offset_right = 105.0
offset_bottom = 137.0
grow_horizontal = 2
grow_vertical = 2
alignment = 1

[node name="Username" type="LineEdit" parent="UI/VBoxContainer"]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2
placeholder_text = "Username"

[node name="Password" type="LineEdit" parent="UI/VBoxContainer"]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2
placeholder_text = "Password"

[node name="HBoxContainer" type="HBoxContainer" parent="UI/VBoxContainer"]
layout_mode = 2
alignment = 1

[node name="LoginButton" type="Button" parent="UI/VBoxContainer/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
text = "Login"

[node name="RegisterButton" type="Button" parent="UI/VBoxContainer/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
text = "Register"

[node name="Log" type="RichTextLabel" parent="UI"]
offset_left = 478.0
offset_top = 463.0
offset_right = 684.0
offset_bottom = 594.0
scroll_following = true
script = ExtResource("2_kh2bm")
metadata/_custom_type_script = "uid://c206uqobsy0s1"
